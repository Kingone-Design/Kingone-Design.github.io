<!DOCTYPE html>
<html>
    <head>
        <meta charset=utf-8>
        <title>Hello Three</title>
        <style>
            body { margin: 0; }
            canvas { width: 100%; height: 100% }
        </style>
    </head>
    <body>
        <script src="js/three.min.js"></script>
        <script>
            var scene = new THREE.Scene();
            var camera = new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,0.1,1000);
            camera.position.z = 5;
            var renderer = new THREE.WebGLRenderer({antialias : true});
            renderer.setClearColor("#e5e5e5");
            renderer.setSize(window.innerWidth,window.innerHeight);
            document.body.appendChild(renderer.domElement);

            var geometry = new THREE.BoxGeometry(1,1,1);
            var material = new THREE.MeshLambertMaterial({color:0xFFCC00});
            var mesh = new THREE.Mesh(geometry,material);
            mesh.position.y = 1;
            mesh.rotation.y = 40;
            scene.add(mesh);

            var geometry2 = new THREE.BoxGeometry(1,1,1);
            var material2 = new THREE.MeshLambertMaterial({color:0x00E3E3});
            var mesh2 = new THREE.Mesh(geometry2,material2);

            scene.add(mesh2);

            var light = new THREE.PointLight(0xFFFFFF,1,500);
            light.position.set(10,0,25);
            scene.add(light);

            renderer.render(scene, camera);

            //定義標籤與模型  之後模型會跟隨標籤
            var target = mesh;
            var targetY;
            var model = mesh2;
            //複製標籤狀態
            var CopyTargetState = function(){
                model.position.x = target.position.x;
                model.position.y = target.position.y-2;
                model.position.z = target.position.z;
                model.rotation.x = target.rotation.x;
                model.rotation.y = target.rotation.y;
                model.rotation.z = target.rotation.z;
            }
            CopyTargetState();
            
            //人工抖動
            var ShakeDegree = 0.2; //設定抖動強度
            var shake = true;
            var ForceShake = function(){
                if(shake == true){
                    mesh.position.x = (Math.random()-0.5)*ShakeDegree;
                    mesh.position.y = 1 + (Math.random()-0.5)*ShakeDegree;
                    mesh.position.z = (Math.random()-0.5)*ShakeDegree;
                    mesh.rotation.x = (Math.random()-0.5)*ShakeDegree*1.5;
                    mesh.rotation.y = 40 + (Math.random()-0.5)*ShakeDegree*1.5;
                    mesh.rotation.z = (Math.random()-0.5)*ShakeDegree*1.5;
                    shake = false;
                }
                else{
                    shake = true;
                }
            }

            //平滑跟隨
            var smoothDegree = 24; //這裡設定平滑程度 越高越平滑 但延遲越高
            var smoothRate = 1/(smoothDegree+1);
            var SmoothFollow = function(){
                model.position.x = (model.position.x*smoothDegree + target.position.x)*smoothRate;
                targetY = target.position.y - 2;
                model.position.y = (model.position.y*smoothDegree + targetY)*smoothRate;
                model.position.z = (model.position.z*smoothDegree + target.position.z)*smoothRate;

                model.rotation.x = (model.rotation.x*smoothDegree + target.rotation.x)*smoothRate;
                model.rotation.y = (model.rotation.y*smoothDegree + target.rotation.y)*smoothRate;
                model.rotation.z = (model.rotation.z*smoothDegree + target.rotation.z)*smoothRate;
            }

            var update = function(){
                requestAnimationFrame(update);
                
                ForceShake();
  
                SmoothFollow();

                renderer.render(scene, camera);
            }

            update();
        </script>
    </body>
</html>